/*Phase 1*/
-- 1. Show product names and their prices
SELECT product_name, price FROM Products;

-- 2.Find all orders placed in June 2024
select * from orders;
SELECT * 
FROM Orders 
WHERE MONTH(order_date) = 6 AND YEAR(order_date) = 2024;

-- 3.Count how many customers you have
SELECT COUNT(*) AS total_customers FROM Customers;

-- 4.List products with price greater than 100 
SELECT * 
FROM Products 
WHERE price > 100;

-- 5. Show total revenue
SELECT 
    SUM(total_amount) AS total_revenue
FROM Orders;

-- 6. List orders sorted by highest value
SELECT * 
FROM Orders 
ORDER BY total_amount DESC;

-- 7.Find products with 'Phone' in the name 
SELECT * 
FROM Products 
WHERE product_name LIKE '%Phone%';

-- 8.Show top 3 most expensive products
SELECT * 
FROM Products 
ORDER BY price DESC 
LIMIT 3;

-- 9.Count total quantity sold for each product
SELECT 
    product_id,
    SUM(quantity) AS total_sold
FROM OrderDetails
GROUP BY product_id;

-- 10.List customers who havenâ€™t placed any order
SELECT * 
FROM Customers c
WHERE NOT EXISTS (
    SELECT 1 
    FROM Orders o 
    WHERE o.customer_id = c.customer_id
);


/*Phase 2*/
-- 1. List the total sales amount generated by each product.
SELECT 
    P.product_name, 
    SUM(OD.quantity * OD.price) AS total_sales
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    P.product_name
ORDER BY 
    total_sales DESC;

-- 2. Identify the top 5 customers who have spent the most on purchases.
SELECT 
    C.first_name, 
    C.last_name, 
    SUM(O.total_amount) AS total_spent
FROM 
    Orders O
JOIN 
    Customers C ON O.customer_id = C.customer_id
GROUP BY 
    C.first_name, C.last_name
ORDER BY 
    total_spent DESC
LIMIT 5;

-- 3. Determine the inventory status by calculating the stock available after considering all orders.
WITH Sold AS (
    SELECT 
        product_id, 
        SUM(quantity) AS total_sold
    FROM 
        OrderDetails
    GROUP BY 
        product_id
)
SELECT 
    p.product_name,
    p.stock_quantity,
    COALESCE(s.total_sold, 0) AS total_sold,
    (p.stock_quantity - s.total_sold) AS current_stock
FROM 
    Products p
LEFT JOIN 
    Sold s ON p.product_id = s.product_id;


-- 4. Find the most popular product category based on the number of orders.
SELECT 
    P.category, 
    COUNT(DISTINCT O.order_id) AS number_of_orders
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
JOIN 
    Orders O ON OD.order_id = O.order_id
GROUP BY 
    P.category
ORDER BY 
    number_of_orders DESC
LIMIT 1;

-- 5. Calculate the average order value (AOV) for the company.
SELECT 
    AVG(total_amount) AS average_order_value
FROM 
    Orders;

-- 6. Identify customers who have placed more than 3 orders.
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COUNT(o.order_id) AS order_count
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id
HAVING 
    COUNT(o.order_id) > 3;

-- 7. Determine the products that have never been sold.
SELECT 
    P.product_name
FROM 
    Products P
LEFT JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
WHERE 
    OD.product_id IS NULL;

-- 8. Calculate the total quantity received for each product and compare it with the total quantity sold.
SELECT 
    P.product_name,
    SUM(I.quantity_received) AS total_received,
    SUM(OD.quantity) AS total_sold
FROM 
    Products P
LEFT JOIN 
    Inventory I ON P.product_id = I.product_id
LEFT JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
GROUP BY 
    P.product_name;

-- 9. Identify the day with the highest sales in the last 30 days.
SELECT
    O.order_date,
    SUM(O.total_amount) AS total_sales
FROM
    Orders O
WHERE
    O.order_date >= DATE_SUB(O.order_date, INTERVAL 30 DAY)
GROUP BY
    O.order_date
ORDER BY
    total_sales DESC
LIMIT 1;


-- 10. Find all orders where the total amount exceeds the average order value.
SELECT *
FROM Orders
WHERE total_amount > (
    SELECT AVG(total_amount) FROM Orders
);

-- 11. Calculate the total number of products sold by each product category.
SELECT 
    P.category, 
    SUM(OD.quantity) AS total_sold
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    P.category
ORDER BY 
    total_sold DESC;

-- 12. Determine the most popular product for each customer based on the quantity purchased.
SELECT 
    C.first_name, 
    C.last_name, 
    P.product_name, 
    MAX(OD.quantity) AS quantity_purchased
FROM 
    Orders O
JOIN 
    Customers C ON O.customer_id = C.customer_id
JOIN 
    OrderDetails OD ON O.order_id = OD.order_id
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    C.first_name, C.last_name, P.product_name
ORDER BY 
    quantity_purchased DESC;

-- 13. Calculate the reorder point for each product, assuming a reorder point formula of (average_daily_sales * lead_time).
WITH DailySales AS (
    SELECT 
        product_id,
        SUM(quantity) / COUNT(DISTINCT order_date) AS avg_daily_sales
    FROM 
        OrderDetails od
    JOIN 
        Orders o ON od.order_id = o.order_id
    GROUP BY 
        product_id
)
SELECT 
    p.product_name,
    ROUND(ds.avg_daily_sales * 7, 2) AS reorder_point
FROM 
    Products p
JOIN 
    DailySales ds ON p.product_id = ds.product_id;


-- 14. Calculate the profit margin for each product, assuming the cost is 70% of the selling price.
SELECT 
    product_name,
    price,
    price * 0.7 AS cost_price,
    price - (price * 0.7) AS profit,
    ROUND(((price - (price * 0.7)) / price) * 100, 2) AS profit_margin_percent
FROM 
    Products;
